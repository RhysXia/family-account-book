type AccountBookListWithPagintion {
  total: Int!
  data: [AccountBook!]!
}

type FlowRecordAmountByDate {
  dealAt: String!
  amount: Float!
}

type AccountBook implements EntityDateTime {
  id: ID!
  name: String!
  desc: String
  """
  管理员
  """
  admins: [SimpleUser!]!
  """
  普通成员，不包含管理员
  """
  members: [SimpleUser!]!

  creator: SimpleUser!

  updater: SimpleUser!

  createdAt: DateTime!
  updatedAt: DateTime!

  savingAccounts(pagination: Pagination): SavingAccountListWithPagintion!
  savingAccount(id: ID!): SavingAccount!

  tags(pagination: Pagination): TagListWithPagintion
  tag(id: ID!): Tag!

  flowRecords(
    filter: FlowRecordFilter
    pagination: Pagination
  ): FlowRecordListWithPagintion!
  flowRecord(id: ID!): FlowRecord!

  """
  获取指定时间段内特定类型流水的总额
  """
  flowRecordAmount(
    tagType: TagType!
    traderId: ID
    startDate: Date
    endDate: Date
  ): Float!

  """
  获取指定时间段内特定类型流水的按照年月日聚合的总额
  """
  flowRecordAmounts(
    tagType: TagType!
    groupBy: DateGroupBy!
    traderId: ID
    startDate: Date
    endDate: Date
  ): [FlowRecordAmountByDate!]!
}

input CreateAccountBookInput {
  name: String!
  desc: String
  """
  管理员id，自己可以不传，默认自己作为管理员
  """
  adminIds: [ID!]
  """
  成员id，会过滤在管理员中的用户
  """
  memberIds: [ID!]
}

input UpdateAccountBookInput {
  id: ID!
  name: String
  desc: String
  """
  管理员id，需要传全量id，自己可以不传
  """
  adminIds: [ID!]
  """
  成员id，会过滤在管理员中的用户
  """
  memberIds: [ID!]
}

type Mutation {
  """
  创建账本
  """
  createAccountBook(accountBook: CreateAccountBookInput!): AccountBook!
  """
  更新账本，自己需要为管理员
  """
  updateAccountBook(accountBook: UpdateAccountBookInput!): AccountBook!

  """
  删除账本
  """
  deleteAccountBook(id: ID!): Boolean!
}
