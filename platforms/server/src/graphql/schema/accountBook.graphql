type AccountBookListWithPagintion {
  total: Int!
  data: [AccountBook!]!
}

type AccountBook implements EntityDateTime {
  id: Int!
  name: String!
  desc: String
  """
  管理员
  """
  admins: [SimpleUser!]!
  """
  普通成员，不包含管理员
  """
  members: [SimpleUser!]!

  creator: SimpleUser!

  updater: SimpleUser!

  createdAt: DateTime!
  updatedAt: DateTime!

  savingAccounts(pagination: Pagination): SavingAccountListWithPagintion!
  savingAccount(id: Int!): SavingAccount!

  tags(pagination: Pagination): TagListWithPagintion
  tag(id: Int!): Tag!

  flowRecords(pagination: Pagination): FlowRecordListWithPagintion!
  flowRecord(id: Int!): FlowRecord!
}

input CreateAccountBookInput {
  name: String!
  desc: String
  """
  管理员id，自己可以不传，默认自己作为管理员
  """
  adminIds: [Int!]
  """
  成员id，会过滤在管理员中的用户
  """
  memberIds: [Int!]
}

input UpdateAccountBookInput {
  id: Int!
  name: String
  desc: String
  """
  管理员id，需要传全量id，自己可以不传
  """
  adminIds: [Int!]
  """
  成员id，会过滤在管理员中的用户
  """
  memberIds: [Int!]
}

type Mutation {
  """
  创建账本
  """
  createAccountBook(accountBook: CreateAccountBookInput!): AccountBook!
  """
  更新账本，自己需要为管理员
  """
  updateAccountBook(accountBook: UpdateAccountBookInput!): AccountBook!
}

type Query {
  """
  获取有权限的指定账本，自己需要为账本管理员或者普通成员
  """
  getAuthAccountBookById(id: Int!): AccountBook!
  """
  获取有权限的账本
  """
  getAuthAccountBooks(pagination: Pagination): AccountBookListWithPagintion!
}
